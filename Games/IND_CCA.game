import 'Primitives/KEM.primitive';

// The security of a KEM is defined through indistinguishability of the output key computed by
// Encaps against different adversaries. The standard security notion is resistance against a
// chosen-ciphertext attack (IND-CCA).
//
// First, the experiment creates a key pair (dk, ek) and encapsulates against the encapsulation key,
// returning (c0, k0). Next, it samples a random key k1 from the key space and a random bit b. Then,
// the adversary A is given c0, the key corresponding to the bit b, and ek, and outputs its guess b'.
// Finally, the adversary wins if they correctly guessed b, i.e., b = b' . During the experiment, the
// adversary has access to the decapsulation oracle Decaps(dk, .), which returns the decapsulation of
// any ciphertext c except for the challenge ciphertext c0.

Game Left(KEM K) {
    K.EncapsKey ek;
    K.DecapsKey dk;
    K.Ciphertext c_0;
    K.SharedSecret k_0;

    K.SharedSecret restrainedDecaps(K.Ciphertext c) {
        if (c_0 == c) {
            return None;
        }
        return K.Decaps(dk, c);
    }

    K.Ciphertext * K.SharedSecret * K.EncapsKey Initialize() {
        K.EncapsKey * K.DecapsKey keypair = K.KeyGen();
        ek = keypair[0];
        dk = keypair[1];

        K.Ciphertext * K.SharedSecret encaps_out = K.Encaps(ek);
        c_0 = encaps_out[0];
        k_0 = encaps_out[1];

        return [c_0, k_0, ek];
     }
}

Game Right(KEM K) {
    K.EncapsKey ek;
    K.DecapsKey dk;
    K.Ciphertext c_0;
    K.SharedSecret k_1;

    K.SharedSecret restrainedDecaps(K.Ciphertext c) {
        if (c_0 == c) {
            return None;
        }
        return K.Decaps(dk, c);
    }

    K.Ciphertext * K.SharedSecret * K.EncapsKey Initialize() {
        K.EncapsKey * K.DecapsKey keypair = K.KeyGen();
        ek = keypair[0];
        dk = keypair[1];

        K.Ciphertext * K.SharedSecret encaps_out = K.Encaps(ek);
        c_0 = encaps_out[0];

        k_1 <- K.SharedSecret;

        return [c_0, k_1, ek];
     }
}


export as IND_CCA;
